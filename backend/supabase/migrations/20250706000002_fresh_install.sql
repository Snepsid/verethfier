-- =====================================================================================
-- Fresh Verethfier System Installation
-- =====================================================================================
-- This migration sets up the complete Verethfier system from scratch on a clean
-- database. Use this for NEW INSTALLATIONS without any legacy data.
--
-- If you have existing legacy data (verifier_servers + verifier_users), use:
-- 20250706000001_complete_verethfier_system.sql instead
--
-- Features included:
-- - Modern verification rules system (/setup commands)
-- - Enhanced role tracking with metadata and timestamps  
-- - Dynamic role management support
-- - No legacy data migration (clean slate)
-- =====================================================================================

-- =====================================================================================
-- STEP 1: Create Legacy Schema Tables (for compatibility)
-- =====================================================================================

-- Legacy servers table (kept for reference and potential future migrations)
CREATE TABLE IF NOT EXISTS public.verifier_servers (
  id text NOT NULL,
  name text NOT NULL,
  role_id text NULL,
  CONSTRAINT verifier_servers_pkey PRIMARY KEY (id)
);

-- Legacy users table (kept for reference and potential future migrations)
CREATE TABLE IF NOT EXISTS public.verifier_users (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  user_id text NOT NULL,
  servers jsonb NOT NULL DEFAULT '{}'::jsonb,
  address text NOT NULL,
  CONSTRAINT verifier_users_pkey PRIMARY KEY (id, user_id),
  CONSTRAINT verifier_users_address_key UNIQUE (address),
  CONSTRAINT verifier_users_user_id_key UNIQUE (user_id)
);

-- =====================================================================================
-- STEP 2: Create Modern Verification Rules System
-- =====================================================================================

-- Modern verification rules table
CREATE TABLE IF NOT EXISTS public.verifier_rules (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    server_id text NOT NULL,
    server_name text NOT NULL DEFAULT '',
    channel_id text,
    channel_name text DEFAULT '',
    role_id text NOT NULL,
    slug text DEFAULT 'ALL',
    attribute_key text DEFAULT '',
    attribute_value text DEFAULT '',
    min_items bigint DEFAULT 0,
    message_id text,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT verifier_rules_pkey PRIMARY KEY (id)
);

-- Add unique constraint for rules to prevent duplicates
ALTER TABLE public.verifier_rules 
ADD CONSTRAINT verifier_rules_unique_rule 
UNIQUE (server_id, channel_id, role_id, slug, attribute_key, attribute_value, min_items);

-- =====================================================================================
-- STEP 3: Create Enhanced Role Tracking System
-- =====================================================================================

-- Enhanced role assignments table with dynamic tracking capabilities
CREATE TABLE IF NOT EXISTS public.verifier_user_roles (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  user_id text NOT NULL,
  server_id text NOT NULL,
  role_id text NOT NULL,
  
  -- Enhanced tracking fields for dynamic role management
  status text DEFAULT 'active' NOT NULL,
  verified_at timestamp with time zone DEFAULT now(),
  last_checked timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  
  -- Link to verification rules (nullable, no FK constraint for flexibility)
  rule_id bigint,
  
  -- Metadata and additional information
  verification_data jsonb DEFAULT '{}',
  user_name text DEFAULT '',
  server_name text DEFAULT '',
  role_name text DEFAULT '',
  
  -- Timestamps
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  
  -- Constraints
  CONSTRAINT verifier_user_roles_pkey PRIMARY KEY (id),
  UNIQUE(user_id, server_id, role_id)
);

-- Create indexes for performance
CREATE INDEX idx_verifier_user_roles_status ON verifier_user_roles(status);
CREATE INDEX idx_verifier_user_roles_last_checked ON verifier_user_roles(last_checked);
CREATE INDEX idx_verifier_user_roles_rule_id ON verifier_user_roles(rule_id);
CREATE INDEX idx_verifier_user_roles_expires_at ON verifier_user_roles(expires_at);
CREATE INDEX idx_verifier_user_roles_user_server ON verifier_user_roles(user_id, server_id);

-- Create composite index for dynamic verification queries
CREATE INDEX idx_verifier_user_roles_active_check 
ON verifier_user_roles(status, last_checked) 
WHERE status = 'active';

-- =====================================================================================
-- STEP 4: Set Up Permissions and Comments
-- =====================================================================================

-- Grant necessary permissions
GRANT ALL ON TABLE verifier_servers TO anon;
GRANT ALL ON TABLE verifier_servers TO authenticated;
GRANT ALL ON TABLE verifier_servers TO service_role;

GRANT ALL ON TABLE verifier_users TO anon;
GRANT ALL ON TABLE verifier_users TO authenticated;
GRANT ALL ON TABLE verifier_users TO service_role;

GRANT ALL ON TABLE verifier_rules TO anon;
GRANT ALL ON TABLE verifier_rules TO authenticated;
GRANT ALL ON TABLE verifier_rules TO service_role;

GRANT ALL ON TABLE verifier_user_roles TO anon;
GRANT ALL ON TABLE verifier_user_roles TO authenticated;
GRANT ALL ON TABLE verifier_user_roles TO service_role;

-- Add helpful comments
COMMENT ON TABLE verifier_servers IS 'Legacy server configurations (kept for compatibility)';
COMMENT ON TABLE verifier_users IS 'Legacy user data (kept for compatibility)';
COMMENT ON TABLE verifier_rules IS 'Modern verification rules for collection-based role assignment';
COMMENT ON TABLE verifier_user_roles IS 'Enhanced role assignments with dynamic verification tracking';

COMMENT ON COLUMN verifier_rules.server_id IS 'Discord server/guild ID';
COMMENT ON COLUMN verifier_rules.channel_id IS 'Discord channel ID for verification';
COMMENT ON COLUMN verifier_rules.role_id IS 'Discord role ID to assign';
COMMENT ON COLUMN verifier_rules.slug IS 'Collection slug to verify (ALL for any collection)';
COMMENT ON COLUMN verifier_rules.attribute_key IS 'Specific attribute to check';
COMMENT ON COLUMN verifier_rules.attribute_value IS 'Required value for the attribute';
COMMENT ON COLUMN verifier_rules.min_items IS 'Minimum number of items required';

COMMENT ON COLUMN verifier_user_roles.status IS 'Role status: active, revoked, expired';
COMMENT ON COLUMN verifier_user_roles.verified_at IS 'When the role was last successfully verified';
COMMENT ON COLUMN verifier_user_roles.last_checked IS 'When verification was last attempted';
COMMENT ON COLUMN verifier_user_roles.expires_at IS 'When this role assignment expires (null = never)';
COMMENT ON COLUMN verifier_user_roles.rule_id IS 'Reference to verification rule (nullable)';
COMMENT ON COLUMN verifier_user_roles.verification_data IS 'JSON metadata about verification process';

-- =====================================================================================
-- FRESH INSTALLATION COMPLETE
-- =====================================================================================

-- Log successful completion
DO $$
BEGIN
    RAISE NOTICE '=================================================================';
    RAISE NOTICE 'Verethfier Fresh Installation Complete!';
    RAISE NOTICE '=================================================================';
    RAISE NOTICE 'System ready with:';
    RAISE NOTICE '- Modern verification rules system (verifier_rules)';
    RAISE NOTICE '- Enhanced role tracking (verifier_user_roles)';
    RAISE NOTICE '- Legacy table compatibility (verifier_servers, verifier_users)';
    RAISE NOTICE '- Dynamic role management support';
    RAISE NOTICE '- Comprehensive indexing for performance';
    RAISE NOTICE '=================================================================';
    RAISE NOTICE 'Next steps:';
    RAISE NOTICE '1. Configure your Discord bot with the necessary permissions';
    RAISE NOTICE '2. Use /setup add-rule to create your first verification rules';
    RAISE NOTICE '3. Users can now verify with your verification messages';
    RAISE NOTICE '=================================================================';
END $$;
