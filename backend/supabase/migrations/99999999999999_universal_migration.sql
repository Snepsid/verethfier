-- =====================================================================================
-- Universal Verethfier Migration Script
-- =====================================================================================
-- This single migration script works for ANY starting state:
-- 1) Fresh install (no existing tables)
-- 2) Legacy system (verifier_servers + verifier_users)
-- 3) Partial migration (some tables exist, some don't)
-- 4) Already migrated (script runs safely without changes)
--
-- The script is fully idempotent and can be run multiple times safely.
-- =====================================================================================

-- Start transaction to ensure atomicity
BEGIN;

DO $$
DECLARE
    has_legacy_servers boolean := false;
    has_legacy_users boolean := false;
    has_modern_rules boolean := false;
    has_modern_user_roles boolean := false;
    migration_count integer := 0;
    legacy_rule_id bigint;
    grace_period_hours integer := 72;
BEGIN
    -- =====================================================================================
    -- STEP 1: Detect Current Database State
    -- =====================================================================================
    
    RAISE NOTICE '=================================================================';
    RAISE NOTICE 'Universal Verethfier Migration Starting...';
    RAISE NOTICE '=================================================================';
    
    -- Check for legacy tables
    SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_name = 'verifier_servers'
    ) INTO has_legacy_servers;
    
    SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_name = 'verifier_users'
    ) INTO has_legacy_users;
    
    -- Check for modern tables
    SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_name = 'verifier_rules'
    ) INTO has_modern_rules;
    
    SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_name = 'verifier_user_roles'
    ) INTO has_modern_user_roles;
    
    -- Log current state
    RAISE NOTICE 'Current database state:';
    RAISE NOTICE '- Legacy servers table: %', CASE WHEN has_legacy_servers THEN 'EXISTS' ELSE 'NOT FOUND' END;
    RAISE NOTICE '- Legacy users table: %', CASE WHEN has_legacy_users THEN 'EXISTS' ELSE 'NOT FOUND' END;
    RAISE NOTICE '- Modern rules table: %', CASE WHEN has_modern_rules THEN 'EXISTS' ELSE 'NOT FOUND' END;
    RAISE NOTICE '- Modern user_roles table: %', CASE WHEN has_modern_user_roles THEN 'EXISTS' ELSE 'NOT FOUND' END;
    
    -- =====================================================================================
    -- STEP 2: Create Modern Tables (If Not Exist)
    -- =====================================================================================
    
    RAISE NOTICE 'Creating modern tables if needed...';
    
    -- Create modern verification rules table
    CREATE TABLE IF NOT EXISTS public.verifier_rules (
        id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
        server_id text NOT NULL,
        server_name text NOT NULL DEFAULT '',
        channel_id text,
        channel_name text DEFAULT '',
        role_id text NOT NULL,
        role_name text DEFAULT '',
        slug text DEFAULT 'ALL',
        attribute_key text DEFAULT 'ALL',
        attribute_value text DEFAULT 'ALL',
        min_items bigint DEFAULT 1,
        message_id text,
        created_at timestamp with time zone DEFAULT now(),
        CONSTRAINT verifier_rules_pkey PRIMARY KEY (id)
    );
    
    -- Add unique constraint for rules (if not exists)
    DO $nested$
    BEGIN
        ALTER TABLE public.verifier_rules 
        ADD CONSTRAINT verifier_rules_unique_rule 
        UNIQUE (server_id, channel_id, role_id, slug, attribute_key, attribute_value, min_items);
    EXCEPTION
        WHEN duplicate_table THEN
            -- Constraint already exists, ignore
            NULL;
    END $nested$;
    
    -- Create enhanced role assignments table  
    CREATE TABLE IF NOT EXISTS public.verifier_user_roles (
        id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
        user_id text NOT NULL,
        server_id text NOT NULL,
        role_id text NOT NULL,
        address text NOT NULL,
        
        -- Enhanced tracking fields for dynamic role management
        status text DEFAULT 'active' NOT NULL,
        verified_at timestamp with time zone DEFAULT now(),
        last_checked timestamp with time zone DEFAULT now(),
        expires_at timestamp with time zone,
        
        -- Link to verification rules (nullable, no FK constraint for flexibility)
        rule_id bigint,
        
        -- Metadata and additional information
        verification_data jsonb DEFAULT '{}',
        user_name text DEFAULT '',
        server_name text DEFAULT '',
        role_name text DEFAULT '',
        
        -- Timestamps
        created_at timestamp with time zone DEFAULT now(),
        updated_at timestamp with time zone DEFAULT now(),
        
        -- Constraints
        CONSTRAINT verifier_user_roles_pkey PRIMARY KEY (id),
        UNIQUE(user_id, server_id, role_id)
    );
    
    -- =====================================================================================
    -- STEP 3: Create Indexes (If Not Exist)
    -- =====================================================================================
    
    -- Create indexes for performance (all with IF NOT EXISTS equivalent)
    CREATE INDEX IF NOT EXISTS idx_verifier_user_roles_status ON verifier_user_roles(status);
    CREATE INDEX IF NOT EXISTS idx_verifier_user_roles_last_checked ON verifier_user_roles(last_checked);
    CREATE INDEX IF NOT EXISTS idx_verifier_user_roles_rule_id ON verifier_user_roles(rule_id);
    CREATE INDEX IF NOT EXISTS idx_verifier_user_roles_expires_at ON verifier_user_roles(expires_at);
    CREATE INDEX IF NOT EXISTS idx_verifier_user_roles_user_server ON verifier_user_roles(user_id, server_id);
    CREATE INDEX IF NOT EXISTS idx_verifier_user_roles_address ON verifier_user_roles(address);
    
    -- Create composite index for dynamic verification queries
    CREATE INDEX IF NOT EXISTS idx_verifier_user_roles_active_check 
    ON verifier_user_roles(status, last_checked) 
    WHERE status = 'active';
    
    -- =====================================================================================
    -- STEP 4: Handle Legacy Data Migration (If Legacy Tables Exist)
    -- =====================================================================================
    
    IF has_legacy_servers AND has_legacy_users THEN
        RAISE NOTICE 'Legacy tables detected - starting data migration...';
        
        -- Create special "legacy" rule for migrated data (if not exists)
        INSERT INTO verifier_rules (
            server_id,
            server_name,
            channel_id,
            channel_name,
            role_id,
            role_name,
            slug,
            attribute_key,
            attribute_value,
            min_items,
            message_id,
            created_at
        ) VALUES (
            '000000000000000000', -- Special server ID for legacy rules
            'Legacy Server',      -- Server name for legacy rules
            '000000000000000000', -- Special channel ID for legacy rules  
            'Legacy Channel',     -- Channel name for legacy rules
            'legacy_role',        -- Special role ID for legacy
            'Legacy Role',        -- Human-readable role name for legacy
            'ALL',               -- Collection slug (ALL = any collection)
            'ALL',               -- Attribute key (ALL = any attribute)
            'ALL',               -- Attribute value (ALL = any value)
            1,                   -- Min items
            NULL,                -- No message ID for legacy
            now()                -- Created timestamp
        ) ON CONFLICT DO NOTHING;
        
        -- Get the legacy rule ID
        SELECT id INTO legacy_rule_id 
        FROM verifier_rules 
        WHERE server_id = '000000000000000000' 
        AND role_id = 'legacy_role'
        LIMIT 1;
        
        IF legacy_rule_id IS NOT NULL THEN
            -- Migrate data from verifier_users to verifier_user_roles
            INSERT INTO verifier_user_roles (
                user_id,
                server_id,
                role_id,
                address,
                status,
                verified_at,
                last_checked,
                expires_at,
                rule_id,
                verification_data,
                user_name,
                server_name,
                role_name,
                created_at,
                updated_at
            )
            SELECT DISTINCT
                vu.user_id,
                server_key AS server_id,
                COALESCE(vs.role_id, 'unknown_role') AS role_id,
                vu.address,
                'active' AS status,
                now() AS verified_at,
                now() AS last_checked,
                now() + (grace_period_hours || ' hours')::interval AS expires_at,
                legacy_rule_id AS rule_id,
                jsonb_build_object(
                    'legacy_migration', true,
                    'migration_date', now(),
                    'grace_period_hours', grace_period_hours,
                    'original_server_value', server_value,
                    'migrated_from', 'verifier_users'
                ) AS verification_data,
                COALESCE(server_value::text, 'Unknown User') AS user_name,
                COALESCE(vs.name, 'Unknown Server') AS server_name,
                'Legacy Role' AS role_name,
                now() AS created_at,
                now() AS updated_at
            FROM verifier_users vu
            CROSS JOIN LATERAL jsonb_each(vu.servers) AS servers(server_key, server_value)
            LEFT JOIN verifier_servers vs ON vs.id = server_key
            WHERE vs.role_id IS NOT NULL
            ON CONFLICT (user_id, server_id, role_id) DO NOTHING;
            
            GET DIAGNOSTICS migration_count = ROW_COUNT;
            
            RAISE NOTICE 'Legacy data migration completed: % users migrated with % hour grace period', 
                         migration_count, grace_period_hours;
        ELSE
            RAISE NOTICE 'Could not create legacy rule - skipping data migration';
        END IF;
        
    ELSE
        RAISE NOTICE 'No legacy tables found - skipping legacy data migration';
    END IF;
    
    -- =====================================================================================
    -- STEP 5: Set Up Permissions and Comments
    -- =====================================================================================
    
    RAISE NOTICE 'Setting up permissions and documentation...';
    
    -- Grant necessary permissions
    GRANT ALL ON TABLE verifier_rules TO anon;
    GRANT ALL ON TABLE verifier_rules TO authenticated; 
    GRANT ALL ON TABLE verifier_rules TO service_role;
    
    GRANT ALL ON TABLE verifier_user_roles TO anon;
    GRANT ALL ON TABLE verifier_user_roles TO authenticated;
    GRANT ALL ON TABLE verifier_user_roles TO service_role;
    
    -- Add helpful comments
    COMMENT ON TABLE verifier_rules IS 'Modern verification rules for collection-based role assignment';
    COMMENT ON TABLE verifier_user_roles IS 'Enhanced role assignments with dynamic verification tracking';
    
    COMMENT ON COLUMN verifier_rules.server_id IS 'Discord server/guild ID';
    COMMENT ON COLUMN verifier_rules.channel_id IS 'Discord channel ID for verification (null = server-wide)';
    COMMENT ON COLUMN verifier_rules.role_id IS 'Discord role ID to assign';
    COMMENT ON COLUMN verifier_rules.slug IS 'Collection slug to verify (ALL = any collection)';
    COMMENT ON COLUMN verifier_rules.attribute_key IS 'Specific attribute to check (ALL = any attribute)';
    COMMENT ON COLUMN verifier_rules.attribute_value IS 'Required value for the attribute (ALL = any value)';
    COMMENT ON COLUMN verifier_rules.min_items IS 'Minimum number of items required';
    
    COMMENT ON COLUMN verifier_user_roles.status IS 'Role status: active, revoked, expired';
    COMMENT ON COLUMN verifier_user_roles.verified_at IS 'When the role was last successfully verified';
    COMMENT ON COLUMN verifier_user_roles.last_checked IS 'When verification was last attempted';
    COMMENT ON COLUMN verifier_user_roles.expires_at IS 'When this role assignment expires (null = never)';
    COMMENT ON COLUMN verifier_user_roles.rule_id IS 'Reference to verification rule (nullable for legacy)';
    COMMENT ON COLUMN verifier_user_roles.verification_data IS 'JSON metadata about verification process';
    
    -- =====================================================================================
    -- STEP 6: Final Status Report
    -- =====================================================================================
    
    RAISE NOTICE '=================================================================';
    RAISE NOTICE 'Universal Verethfier Migration Completed Successfully!';
    RAISE NOTICE '=================================================================';
    
    IF has_legacy_servers AND has_legacy_users THEN
        RAISE NOTICE 'Migration type: LEGACY UPGRADE';
        RAISE NOTICE '- Migrated % users from legacy system', migration_count;
        RAISE NOTICE '- Legacy users have % hour grace period', grace_period_hours;
        RAISE NOTICE '- Legacy tables preserved for safety';
    ELSIF NOT has_modern_rules OR NOT has_modern_user_roles THEN
        RAISE NOTICE 'Migration type: FRESH INSTALL';
        RAISE NOTICE '- Created modern verification system from scratch';
    ELSE
        RAISE NOTICE 'Migration type: ALREADY UP TO DATE';
        RAISE NOTICE '- Modern system detected, no changes needed';
    END IF;
    
    RAISE NOTICE '';
    RAISE NOTICE 'System features available:';
    RAISE NOTICE '- Modern verification rules system (/setup commands)';
    RAISE NOTICE '- Enhanced role tracking with metadata and timestamps';
    RAISE NOTICE '- Dynamic role management support';
    RAISE NOTICE '- Comprehensive indexing for performance';
    RAISE NOTICE '- Unified API supporting both legacy and modern data';
    RAISE NOTICE '=================================================================';
    
END $$;

-- Commit the transaction
COMMIT;
