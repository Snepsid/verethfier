-- =====================================================================================
-- Complete Verethfier System Migration
-- =====================================================================================
-- This migration takes you from the original legacy schema to the complete enhanced
-- dynamic role management system.
--
-- FROM: Legacy two-table system (verifier_servers + verifier_users)
-- TO:   Enhanced dynamic system with rule-based verification and role tracking
--
-- Features included:
-- - Modern verification rules system (/setup commands)
-- - Enhanced role tracking with metadata and timestamps
-- - Legacy data migration with 72-hour grace period
-- - Dynamic role management support
-- =====================================================================================

-- =====================================================================================
-- STEP 1: Create Enhanced Verification Rules System
-- =====================================================================================

-- Modern verification rules table (replaces simple server configs)
CREATE TABLE IF NOT EXISTS public.verifier_rules (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    server_id text NOT NULL,
    server_name text NOT NULL DEFAULT '',
    channel_id text,
    channel_name text DEFAULT '',
    role_id text NOT NULL,
    slug text DEFAULT 'ALL',
    attribute_key text DEFAULT '',
    attribute_value text DEFAULT '',
    min_items bigint DEFAULT 0,
    message_id text,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT verifier_rules_pkey PRIMARY KEY (id)
);

-- Add unique constraint for rules to prevent duplicates
ALTER TABLE public.verifier_rules 
ADD CONSTRAINT verifier_rules_unique_rule 
UNIQUE (server_id, channel_id, role_id, slug, attribute_key, attribute_value, min_items);

-- =====================================================================================
-- STEP 2: Create Enhanced Role Tracking System
-- =====================================================================================

-- Enhanced role assignments table with dynamic tracking capabilities
CREATE TABLE IF NOT EXISTS public.verifier_user_roles (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  user_id text NOT NULL,
  server_id text NOT NULL,
  role_id text NOT NULL,
  
  -- Enhanced tracking fields for dynamic role management
  status text DEFAULT 'active' NOT NULL,
  verified_at timestamp with time zone DEFAULT now(),
  last_checked timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  
  -- Link to verification rules (nullable, no FK constraint for flexibility)
  rule_id bigint,
  
  -- Metadata and additional information
  verification_data jsonb DEFAULT '{}',
  user_name text DEFAULT '',
  server_name text DEFAULT '',
  role_name text DEFAULT '',
  
  -- Timestamps
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  
  -- Constraints
  CONSTRAINT verifier_user_roles_pkey PRIMARY KEY (id),
  UNIQUE(user_id, server_id, role_id)
);

-- Create indexes for performance
CREATE INDEX idx_verifier_user_roles_status ON verifier_user_roles(status);
CREATE INDEX idx_verifier_user_roles_last_checked ON verifier_user_roles(last_checked);
CREATE INDEX idx_verifier_user_roles_rule_id ON verifier_user_roles(rule_id);
CREATE INDEX idx_verifier_user_roles_expires_at ON verifier_user_roles(expires_at);
CREATE INDEX idx_verifier_user_roles_user_server ON verifier_user_roles(user_id, server_id);

-- Create composite index for dynamic verification queries
CREATE INDEX idx_verifier_user_roles_active_check 
ON verifier_user_roles(status, last_checked) 
WHERE status = 'active';

-- =====================================================================================
-- STEP 3: Create Legacy Data Migration Support
-- =====================================================================================

-- Create special "legacy" rule for migrated data
INSERT INTO verifier_rules (
  server_id,
  server_name,
  channel_id,
  channel_name,
  role_id,
  slug,
  attribute_key,
  attribute_value,
  min_items,
  message_id,
  created_at
) VALUES (
  '000000000000000000', -- Special server ID for legacy rules
  'Legacy Server',      -- Server name for legacy rules
  '000000000000000000', -- Special channel ID for legacy rules
  'Legacy Channel',     -- Channel name for legacy rules
  'legacy_role',        -- Special role ID for legacy
  'legacy_collection',  -- Special collection slug
  'legacy_attribute',   -- Special attribute key
  'legacy_value',       -- Special attribute value
  1,                    -- Min items
  NULL,                 -- No message ID for legacy
  now()                 -- Created timestamp
) ON CONFLICT DO NOTHING;

-- =====================================================================================
-- STEP 4: Migrate Legacy Data with Grace Period
-- =====================================================================================

DO $$
DECLARE
    legacy_rule_id bigint;
    grace_period_hours integer := 72;
    migration_count integer := 0;
BEGIN
    -- Get the legacy rule ID
    SELECT id INTO legacy_rule_id 
    FROM verifier_rules 
    WHERE server_id = '000000000000000000' 
    AND role_id = 'legacy_role'
    LIMIT 1;

    IF legacy_rule_id IS NULL THEN
        RAISE NOTICE 'Legacy rule not found, skipping legacy data migration';
        RETURN;
    END IF;

    -- Migrate data from verifier_users to verifier_user_roles
    INSERT INTO verifier_user_roles (
        user_id,
        server_id,
        role_id,
        status,
        verified_at,
        last_checked,
        expires_at,
        rule_id,
        verification_data,
        user_name,
        server_name,
        role_name,
        created_at,
        updated_at
    )
    SELECT DISTINCT
        vu.user_id,
        server_key AS server_id,
        vs.role_id,
        'active' AS status,
        now() AS verified_at,
        now() AS last_checked,
        now() + (grace_period_hours || ' hours')::interval AS expires_at,
        legacy_rule_id AS rule_id,
        jsonb_build_object(
            'legacy_migration', true,
            'migration_date', now(),
            'grace_period_hours', grace_period_hours,
            'original_server_value', server_value,
            'migrated_from', 'verifier_users'
        ) AS verification_data,
        COALESCE(server_value::text, 'Unknown User') AS user_name,
        COALESCE(vs.name, 'Unknown Server') AS server_name,
        'Legacy Role' AS role_name,
        now() AS created_at,
        now() AS updated_at
    FROM verifier_users vu
    CROSS JOIN LATERAL jsonb_each(vu.servers) AS servers(server_key, server_value)
    LEFT JOIN verifier_servers vs ON vs.id = server_key
    WHERE vs.role_id IS NOT NULL
    ON CONFLICT (user_id, server_id, role_id) DO NOTHING;

    GET DIAGNOSTICS migration_count = ROW_COUNT;
    
    RAISE NOTICE 'Legacy data migration completed: % users migrated with % hour grace period', 
                 migration_count, grace_period_hours;
END $$;

-- =====================================================================================
-- STEP 5: Set Up Permissions and Comments
-- =====================================================================================

-- Grant necessary permissions
GRANT ALL ON TABLE verifier_rules TO anon;
GRANT ALL ON TABLE verifier_rules TO authenticated;
GRANT ALL ON TABLE verifier_rules TO service_role;

GRANT ALL ON TABLE verifier_user_roles TO anon;
GRANT ALL ON TABLE verifier_user_roles TO authenticated;
GRANT ALL ON TABLE verifier_user_roles TO service_role;

-- Add helpful comments
COMMENT ON TABLE verifier_rules IS 'Modern verification rules for collection-based role assignment';
COMMENT ON TABLE verifier_user_roles IS 'Enhanced role assignments with dynamic verification tracking';

COMMENT ON COLUMN verifier_rules.server_id IS 'Discord server/guild ID';
COMMENT ON COLUMN verifier_rules.channel_id IS 'Discord channel ID for verification';
COMMENT ON COLUMN verifier_rules.role_id IS 'Discord role ID to assign';
COMMENT ON COLUMN verifier_rules.slug IS 'Collection slug to verify (ALL for any collection)';
COMMENT ON COLUMN verifier_rules.attribute_key IS 'Specific attribute to check';
COMMENT ON COLUMN verifier_rules.attribute_value IS 'Required value for the attribute';
COMMENT ON COLUMN verifier_rules.min_items IS 'Minimum number of items required';

COMMENT ON COLUMN verifier_user_roles.status IS 'Role status: active, revoked, expired';
COMMENT ON COLUMN verifier_user_roles.verified_at IS 'When the role was last successfully verified';
COMMENT ON COLUMN verifier_user_roles.last_checked IS 'When verification was last attempted';
COMMENT ON COLUMN verifier_user_roles.expires_at IS 'When this role assignment expires (null = never)';
COMMENT ON COLUMN verifier_user_roles.rule_id IS 'Reference to verification rule (nullable for legacy)';
COMMENT ON COLUMN verifier_user_roles.verification_data IS 'JSON metadata about verification process';

-- =====================================================================================
-- MIGRATION COMPLETE
-- =====================================================================================

-- Log successful completion
DO $$
BEGIN
    RAISE NOTICE '=================================================================';
    RAISE NOTICE 'Verethfier Complete System Migration Successful!';
    RAISE NOTICE '=================================================================';
    RAISE NOTICE 'System now includes:';
    RAISE NOTICE '- Modern verification rules system (verifier_rules)';
    RAISE NOTICE '- Enhanced role tracking (verifier_user_roles)';
    RAISE NOTICE '- Legacy data migration with 72-hour grace period';
    RAISE NOTICE '- Dynamic role management support';
    RAISE NOTICE '- Comprehensive indexing for performance';
    RAISE NOTICE '=================================================================';
END $$;
