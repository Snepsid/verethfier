import { Test, TestingModule } from '@nestjs/testing';

// Mock dotenv first to prevent real config loading
jest.mock('dotenv', () => ({
  config: jest.fn()
}));

// Mock Supabase completely before any other imports
const mockSupabaseClient = {
  from: jest.fn(() => ({
    select: jest.fn(() => ({
      or: jest.fn(() => Promise.resolve({ data: [], error: null })),
      eq: jest.fn(() => Promise.resolve({ data: [], error: null })),
      ilike: jest.fn(() => Promise.resolve({ data: [], error: null })),
      in: jest.fn(() => Promise.resolve({ data: [], error: null })),
      gte: jest.fn(() => Promise.resolve({ data: [], error: null }))
    }))
  }))
};

jest.mock('@supabase/supabase-js', () => ({
  createClient: jest.fn(() => mockSupabaseClient)
}));

// Now safely import the service
import { DataService } from '../src/services/data.service';

describe('DataService - Unit Tests', () => {
  let service: DataService;

  beforeEach(async () => {
    jest.clearAllMocks();
    
    const module: TestingModule = await Test.createTestingModule({
      providers: [DataService],
    }).compile();

    service = module.get<DataService>(DataService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  describe('service structure', () => {
    it('should have all required methods', () => {
      expect(typeof service.checkAssetOwnership).toBe('function');
      expect(typeof service.getOwnedSlugs).toBe('function');
      expect(typeof service.getDetailedAssets).toBe('function');
      expect(typeof service.getAllSlugs).toBe('function');
      expect(typeof service.checkAssetOwnershipWithCriteria).toBe('function');
    });
  });

  describe('method signatures', () => {
    it('checkAssetOwnership should accept 1 parameter', () => {
      expect(service.checkAssetOwnership.length).toBe(1);
    });

    it('getOwnedSlugs should accept 1 parameter', () => {
      expect(service.getOwnedSlugs.length).toBe(1);
    });

    it('getDetailedAssets should accept 1 parameter', () => {
      expect(service.getDetailedAssets.length).toBe(1);
    });

    it('getAllSlugs should accept no parameters', () => {
      expect(service.getAllSlugs.length).toBe(0);
    });

    it('checkAssetOwnershipWithCriteria should accept up to 5 parameters', () => {
      expect(service.checkAssetOwnershipWithCriteria.length).toBe(4);
    });
  });

  describe('checkAssetOwnership', () => {
    it('should return count for valid addresses with assets', async () => {
      const result = await service.checkAssetOwnership('0x1234567890123456789012345678901234567890');
      expect(typeof result).toBe('number');
      expect(result).toBeGreaterThanOrEqual(0);
    });

    it('should return 0 for addresses with no assets', async () => {
      const result = await service.checkAssetOwnership('0x0000000000000000000000000000000000000000');
      expect(typeof result).toBe('number');
    });
  });

  describe('getOwnedSlugs', () => {
    it('should return array of slugs for valid addresses', async () => {
      const result = await service.getOwnedSlugs('0x1234567890123456789012345678901234567890');
      expect(Array.isArray(result)).toBe(true);
    });

    it('should return empty array for addresses with no assets', async () => {
      const result = await service.getOwnedSlugs('0x0000000000000000000000000000000000000000');
      expect(Array.isArray(result)).toBe(true);
    });
  });

  describe('getDetailedAssets', () => {
    it('should return array for valid addresses', async () => {
      const result = await service.getDetailedAssets('0x1234567890123456789012345678901234567890');
      expect(Array.isArray(result)).toBe(true);
    });

    it('should return empty array for addresses with no assets', async () => {
      const result = await service.getDetailedAssets('0x0000000000000000000000000000000000000000');
      expect(Array.isArray(result)).toBe(true);
    });
  });

  describe('getAllSlugs', () => {
    it('should return array of slugs including all-collections', async () => {
      const result = await service.getAllSlugs();
      expect(Array.isArray(result)).toBe(true);
      expect(result).toContain('all-collections');
    });
  });

  describe('checkAssetOwnershipWithCriteria', () => {
    it('should return count for valid parameters', async () => {
      const result = await service.checkAssetOwnershipWithCriteria(
        '0x1234567890123456789012345678901234567890',
        'test-collection-1',
        'Color',
        'Blue',
        1
      );
      expect(typeof result).toBe('number');
      expect(result).toBeGreaterThanOrEqual(0);
    });

    it('should handle undefined optional parameters', async () => {
      const result = await service.checkAssetOwnershipWithCriteria(
        '0x1234567890123456789012345678901234567890',
        'test-collection-1'
      );
      expect(typeof result).toBe('number');
    });

    it('should respect minItems parameter', async () => {
      const result = await service.checkAssetOwnershipWithCriteria(
        '0x1234567890123456789012345678901234567890',
        'test-collection-1',
        undefined,
        undefined,
        10
      );
      expect(typeof result).toBe('number');
    });

    it('should handle zero minItems', async () => {
      const result = await service.checkAssetOwnershipWithCriteria(
        '0x1234567890123456789012345678901234567890',
        'test-collection-1',
        undefined,
        undefined,
        0
      );
      expect(typeof result).toBe('number');
    });
  });

  describe('error handling', () => {
    it('should handle database connection issues gracefully', () => {
      // Since we're mocking, we'll test that the service is structured to handle errors
      expect(service).toBeDefined();
      expect(typeof service.checkAssetOwnership).toBe('function');
    });
  });

  describe('AssetWithAttrs type validation', () => {
    it('should define correct structure for AssetWithAttrs', () => {
      // This tests that the service methods return appropriately structured data
      expect(service).toBeDefined();
      expect(typeof service.getDetailedAssets).toBe('function');
    });
  });
});
